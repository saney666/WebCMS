//------------------------------------------------------------------------------
// <auto-generated>
//    這個程式碼是由範本產生。
//
//    對這個檔案進行手動變更可能導致您的應用程式產生未預期的行為。
//    如果重新產生程式碼，將會覆寫對這個檔案的手動變更。
// </auto-generated>
//------------------------------------------------------------------------------

namespace TSMC14B.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<analog_comment> analog_comment { get; set; }
        public DbSet<CompareTable> CompareTable { get; set; }
        public DbSet<PhoneCallCompanyInfo> PhoneCallCompanyInfo { get; set; }
        public DbSet<PhoneCallUserInfo> PhoneCallUserInfo { get; set; }
        public DbSet<vw_AlarmDealInfo> vw_AlarmDealInfo { get; set; }
        public DbSet<vw_eq_status> vw_eq_status { get; set; }
        public DbSet<vw_pm_history> vw_pm_history { get; set; }
        public DbSet<vw_pm_trigger> vw_pm_trigger { get; set; }
    
        public virtual int uSP_Change_Alarm(Nullable<byte> action, string tagname)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(byte));
    
            var tagnameParameter = tagname != null ?
                new ObjectParameter("Tagname", tagname) :
                new ObjectParameter("Tagname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uSP_Change_Alarm", actionParameter, tagnameParameter);
        }
    
        public virtual int uSP_Change_AlarmDeal(Nullable<int> aid, string system, string toolID, Nullable<bool> affect, string affTime, string dealWith, string almCause, string parts, string pmDate, string pmCycle, Nullable<bool> caseClose, string dealUser)
        {
            var aidParameter = aid.HasValue ?
                new ObjectParameter("aid", aid) :
                new ObjectParameter("aid", typeof(int));
    
            var systemParameter = system != null ?
                new ObjectParameter("system", system) :
                new ObjectParameter("system", typeof(string));
    
            var toolIDParameter = toolID != null ?
                new ObjectParameter("toolID", toolID) :
                new ObjectParameter("toolID", typeof(string));
    
            var affectParameter = affect.HasValue ?
                new ObjectParameter("affect", affect) :
                new ObjectParameter("affect", typeof(bool));
    
            var affTimeParameter = affTime != null ?
                new ObjectParameter("affTime", affTime) :
                new ObjectParameter("affTime", typeof(string));
    
            var dealWithParameter = dealWith != null ?
                new ObjectParameter("dealWith", dealWith) :
                new ObjectParameter("dealWith", typeof(string));
    
            var almCauseParameter = almCause != null ?
                new ObjectParameter("almCause", almCause) :
                new ObjectParameter("almCause", typeof(string));
    
            var partsParameter = parts != null ?
                new ObjectParameter("parts", parts) :
                new ObjectParameter("parts", typeof(string));
    
            var pmDateParameter = pmDate != null ?
                new ObjectParameter("pmDate", pmDate) :
                new ObjectParameter("pmDate", typeof(string));
    
            var pmCycleParameter = pmCycle != null ?
                new ObjectParameter("pmCycle", pmCycle) :
                new ObjectParameter("pmCycle", typeof(string));
    
            var caseCloseParameter = caseClose.HasValue ?
                new ObjectParameter("caseClose", caseClose) :
                new ObjectParameter("caseClose", typeof(bool));
    
            var dealUserParameter = dealUser != null ?
                new ObjectParameter("dealUser", dealUser) :
                new ObjectParameter("dealUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uSP_Change_AlarmDeal", aidParameter, systemParameter, toolIDParameter, affectParameter, affTimeParameter, dealWithParameter, almCauseParameter, partsParameter, pmDateParameter, pmCycleParameter, caseCloseParameter, dealUserParameter);
        }
    
        public virtual int uSP_Change_CompareTable(Nullable<byte> action, Nullable<int> tagIndex, string tagname, string comment, string sendBody, string voiceText, string sendTo, Nullable<int> priLo, Nullable<int> priHi, Nullable<int> iSO, Nullable<bool> callOut, string vendor, string machineType)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(byte));
    
            var tagIndexParameter = tagIndex.HasValue ?
                new ObjectParameter("TagIndex", tagIndex) :
                new ObjectParameter("TagIndex", typeof(int));
    
            var tagnameParameter = tagname != null ?
                new ObjectParameter("Tagname", tagname) :
                new ObjectParameter("Tagname", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var sendBodyParameter = sendBody != null ?
                new ObjectParameter("SendBody", sendBody) :
                new ObjectParameter("SendBody", typeof(string));
    
            var voiceTextParameter = voiceText != null ?
                new ObjectParameter("VoiceText", voiceText) :
                new ObjectParameter("VoiceText", typeof(string));
    
            var sendToParameter = sendTo != null ?
                new ObjectParameter("SendTo", sendTo) :
                new ObjectParameter("SendTo", typeof(string));
    
            var priLoParameter = priLo.HasValue ?
                new ObjectParameter("PriLo", priLo) :
                new ObjectParameter("PriLo", typeof(int));
    
            var priHiParameter = priHi.HasValue ?
                new ObjectParameter("PriHi", priHi) :
                new ObjectParameter("PriHi", typeof(int));
    
            var iSOParameter = iSO.HasValue ?
                new ObjectParameter("ISO", iSO) :
                new ObjectParameter("ISO", typeof(int));
    
            var callOutParameter = callOut.HasValue ?
                new ObjectParameter("CallOut", callOut) :
                new ObjectParameter("CallOut", typeof(bool));
    
            var vendorParameter = vendor != null ?
                new ObjectParameter("Vendor", vendor) :
                new ObjectParameter("Vendor", typeof(string));
    
            var machineTypeParameter = machineType != null ?
                new ObjectParameter("MachineType", machineType) :
                new ObjectParameter("MachineType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uSP_Change_CompareTable", actionParameter, tagIndexParameter, tagnameParameter, commentParameter, sendBodyParameter, voiceTextParameter, sendToParameter, priLoParameter, priHiParameter, iSOParameter, callOutParameter, vendorParameter, machineTypeParameter);
        }
    
        public virtual int uSP_Change_LoginInfo(Nullable<byte> action, string login_name, string login_pwd, Nullable<byte> level_id, string username)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(byte));
    
            var login_nameParameter = login_name != null ?
                new ObjectParameter("login_name", login_name) :
                new ObjectParameter("login_name", typeof(string));
    
            var login_pwdParameter = login_pwd != null ?
                new ObjectParameter("login_pwd", login_pwd) :
                new ObjectParameter("login_pwd", typeof(string));
    
            var level_idParameter = level_id.HasValue ?
                new ObjectParameter("level_id", level_id) :
                new ObjectParameter("level_id", typeof(byte));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uSP_Change_LoginInfo", actionParameter, login_nameParameter, login_pwdParameter, level_idParameter, usernameParameter);
        }
    
        public virtual int uSP_Change_LoginLevel(Nullable<byte> action, Nullable<short> login_level, string level_name, Nullable<byte> level_id)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(byte));
    
            var login_levelParameter = login_level.HasValue ?
                new ObjectParameter("login_level", login_level) :
                new ObjectParameter("login_level", typeof(short));
    
            var level_nameParameter = level_name != null ?
                new ObjectParameter("level_name", level_name) :
                new ObjectParameter("level_name", typeof(string));
    
            var level_idParameter = level_id.HasValue ?
                new ObjectParameter("level_id", level_id) :
                new ObjectParameter("level_id", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uSP_Change_LoginLevel", actionParameter, login_levelParameter, level_nameParameter, level_idParameter);
        }
    
        public virtual int uSP_Change_PhoneCallStatus(Nullable<bool> statusNow)
        {
            var statusNowParameter = statusNow.HasValue ?
                new ObjectParameter("statusNow", statusNow) :
                new ObjectParameter("statusNow", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uSP_Change_PhoneCallStatus", statusNowParameter);
        }
    
        public virtual int uSP_Change_PhoneCallUserInfo(Nullable<byte> action, string userID, string password, string chineseName, Nullable<int> comID, Nullable<bool> isApproved, Nullable<System.DateTime> changeDate, Nullable<System.DateTime> lastLoginDate)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(byte));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var chineseNameParameter = chineseName != null ?
                new ObjectParameter("ChineseName", chineseName) :
                new ObjectParameter("ChineseName", typeof(string));
    
            var comIDParameter = comID.HasValue ?
                new ObjectParameter("ComID", comID) :
                new ObjectParameter("ComID", typeof(int));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var changeDateParameter = changeDate.HasValue ?
                new ObjectParameter("ChangeDate", changeDate) :
                new ObjectParameter("ChangeDate", typeof(System.DateTime));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uSP_Change_PhoneCallUserInfo", actionParameter, userIDParameter, passwordParameter, chineseNameParameter, comIDParameter, isApprovedParameter, changeDateParameter, lastLoginDateParameter);
        }
    
        public virtual int uSP_Change_PMHistory(Nullable<short> pid, string tid, Nullable<bool> pm, string memo, string op, Nullable<bool> pm_flag, Nullable<bool> ts_flag, Nullable<bool> backup_flag, Nullable<bool> cmsError_flag, Nullable<bool> other_flag)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(short));
    
            var tidParameter = tid != null ?
                new ObjectParameter("tid", tid) :
                new ObjectParameter("tid", typeof(string));
    
            var pmParameter = pm.HasValue ?
                new ObjectParameter("pm", pm) :
                new ObjectParameter("pm", typeof(bool));
    
            var memoParameter = memo != null ?
                new ObjectParameter("memo", memo) :
                new ObjectParameter("memo", typeof(string));
    
            var opParameter = op != null ?
                new ObjectParameter("op", op) :
                new ObjectParameter("op", typeof(string));
    
            var pm_flagParameter = pm_flag.HasValue ?
                new ObjectParameter("pm_flag", pm_flag) :
                new ObjectParameter("pm_flag", typeof(bool));
    
            var ts_flagParameter = ts_flag.HasValue ?
                new ObjectParameter("ts_flag", ts_flag) :
                new ObjectParameter("ts_flag", typeof(bool));
    
            var backup_flagParameter = backup_flag.HasValue ?
                new ObjectParameter("backup_flag", backup_flag) :
                new ObjectParameter("backup_flag", typeof(bool));
    
            var cmsError_flagParameter = cmsError_flag.HasValue ?
                new ObjectParameter("cmsError_flag", cmsError_flag) :
                new ObjectParameter("cmsError_flag", typeof(bool));
    
            var other_flagParameter = other_flag.HasValue ?
                new ObjectParameter("other_flag", other_flag) :
                new ObjectParameter("other_flag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uSP_Change_PMHistory", pidParameter, tidParameter, pmParameter, memoParameter, opParameter, pm_flagParameter, ts_flagParameter, backup_flagParameter, cmsError_flagParameter, other_flagParameter);
        }
    
        public virtual int uSP_Change_PMTrigger(Nullable<bool> action, string toolID, Nullable<bool> pmFlag)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(bool));
    
            var toolIDParameter = toolID != null ?
                new ObjectParameter("toolID", toolID) :
                new ObjectParameter("toolID", typeof(string));
    
            var pmFlagParameter = pmFlag.HasValue ?
                new ObjectParameter("pmFlag", pmFlag) :
                new ObjectParameter("pmFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uSP_Change_PMTrigger", actionParameter, toolIDParameter, pmFlagParameter);
        }
    
        public virtual int uSP_Select_AlarmDeal(string system, string toolID, string alarmMsg, Nullable<bool> caseClose, Nullable<System.DateTime> almFromTime, Nullable<System.DateTime> almToTime, Nullable<int> alarmID)
        {
            var systemParameter = system != null ?
                new ObjectParameter("system", system) :
                new ObjectParameter("system", typeof(string));
    
            var toolIDParameter = toolID != null ?
                new ObjectParameter("toolID", toolID) :
                new ObjectParameter("toolID", typeof(string));
    
            var alarmMsgParameter = alarmMsg != null ?
                new ObjectParameter("alarmMsg", alarmMsg) :
                new ObjectParameter("alarmMsg", typeof(string));
    
            var caseCloseParameter = caseClose.HasValue ?
                new ObjectParameter("caseClose", caseClose) :
                new ObjectParameter("caseClose", typeof(bool));
    
            var almFromTimeParameter = almFromTime.HasValue ?
                new ObjectParameter("almFromTime", almFromTime) :
                new ObjectParameter("almFromTime", typeof(System.DateTime));
    
            var almToTimeParameter = almToTime.HasValue ?
                new ObjectParameter("almToTime", almToTime) :
                new ObjectParameter("almToTime", typeof(System.DateTime));
    
            var alarmIDParameter = alarmID.HasValue ?
                new ObjectParameter("alarmID", alarmID) :
                new ObjectParameter("alarmID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uSP_Select_AlarmDeal", systemParameter, toolIDParameter, alarmMsgParameter, caseCloseParameter, almFromTimeParameter, almToTimeParameter, alarmIDParameter);
        }
    
        public virtual ObjectResult<uSP_Select_AlarmHistory_Result> uSP_Select_AlarmHistory(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string toolID, Nullable<short> vid, string gname)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var toolIDParameter = toolID != null ?
                new ObjectParameter("toolID", toolID) :
                new ObjectParameter("toolID", typeof(string));
    
            var vidParameter = vid.HasValue ?
                new ObjectParameter("vid", vid) :
                new ObjectParameter("vid", typeof(short));
    
            var gnameParameter = gname != null ?
                new ObjectParameter("gname", gname) :
                new ObjectParameter("gname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uSP_Select_AlarmHistory_Result>("uSP_Select_AlarmHistory", fromDateParameter, toDateParameter, toolIDParameter, vidParameter, gnameParameter);
        }
    
        public virtual ObjectResult<uSP_Select_AlarmNow_Result> uSP_Select_AlarmNow()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uSP_Select_AlarmNow_Result>("uSP_Select_AlarmNow");
        }
    
        public virtual ObjectResult<uSP_Select_CompareTable_Result> uSP_Select_CompareTable(string tagname, string vendor, string machineType, Nullable<bool> getDropdownItem)
        {
            var tagnameParameter = tagname != null ?
                new ObjectParameter("Tagname", tagname) :
                new ObjectParameter("Tagname", typeof(string));
    
            var vendorParameter = vendor != null ?
                new ObjectParameter("Vendor", vendor) :
                new ObjectParameter("Vendor", typeof(string));
    
            var machineTypeParameter = machineType != null ?
                new ObjectParameter("MachineType", machineType) :
                new ObjectParameter("MachineType", typeof(string));
    
            var getDropdownItemParameter = getDropdownItem.HasValue ?
                new ObjectParameter("GetDropdownItem", getDropdownItem) :
                new ObjectParameter("GetDropdownItem", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uSP_Select_CompareTable_Result>("uSP_Select_CompareTable", tagnameParameter, vendorParameter, machineTypeParameter, getDropdownItemParameter);
        }
    
        public virtual ObjectResult<uSP_Select_CompareTag_Result> uSP_Select_CompareTag(string tagname, string comment)
        {
            var tagnameParameter = tagname != null ?
                new ObjectParameter("Tagname", tagname) :
                new ObjectParameter("Tagname", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uSP_Select_CompareTag_Result>("uSP_Select_CompareTag", tagnameParameter, commentParameter);
        }
    
        public virtual ObjectResult<string> uSP_Select_EQ_List(Nullable<short> vid, string gname, Nullable<bool> gonly)
        {
            var vidParameter = vid.HasValue ?
                new ObjectParameter("vid", vid) :
                new ObjectParameter("vid", typeof(short));
    
            var gnameParameter = gname != null ?
                new ObjectParameter("gname", gname) :
                new ObjectParameter("gname", typeof(string));
    
            var gonlyParameter = gonly.HasValue ?
                new ObjectParameter("gonly", gonly) :
                new ObjectParameter("gonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uSP_Select_EQ_List", vidParameter, gnameParameter, gonlyParameter);
        }
    
        public virtual ObjectResult<uSP_Select_EQ_StatusCount_Result> uSP_Select_EQ_StatusCount(Nullable<short> vid, Nullable<byte> sid, Nullable<bool> gFlag)
        {
            var vidParameter = vid.HasValue ?
                new ObjectParameter("vid", vid) :
                new ObjectParameter("vid", typeof(short));
    
            var sidParameter = sid.HasValue ?
                new ObjectParameter("sid", sid) :
                new ObjectParameter("sid", typeof(byte));
    
            var gFlagParameter = gFlag.HasValue ?
                new ObjectParameter("gFlag", gFlag) :
                new ObjectParameter("gFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uSP_Select_EQ_StatusCount_Result>("uSP_Select_EQ_StatusCount", vidParameter, sidParameter, gFlagParameter);
        }
    
        public virtual ObjectResult<uSP_Select_EQ_Type_Result> uSP_Select_EQ_Type(Nullable<short> vid, string gname, Nullable<short> tid)
        {
            var vidParameter = vid.HasValue ?
                new ObjectParameter("vid", vid) :
                new ObjectParameter("vid", typeof(short));
    
            var gnameParameter = gname != null ?
                new ObjectParameter("gname", gname) :
                new ObjectParameter("gname", typeof(string));
    
            var tidParameter = tid.HasValue ?
                new ObjectParameter("tid", tid) :
                new ObjectParameter("tid", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uSP_Select_EQ_Type_Result>("uSP_Select_EQ_Type", vidParameter, gnameParameter, tidParameter);
        }
    
        public virtual ObjectResult<uSP_Select_LoginInfo_Result> uSP_Select_LoginInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uSP_Select_LoginInfo_Result>("uSP_Select_LoginInfo");
        }
    
        public virtual ObjectResult<uSP_Select_LoginLevel_Result> uSP_Select_LoginLevel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uSP_Select_LoginLevel_Result>("uSP_Select_LoginLevel");
        }
    
        public virtual ObjectResult<uSP_Select_PhoneCallCompanyInfo_All_Result> uSP_Select_PhoneCallCompanyInfo_All()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uSP_Select_PhoneCallCompanyInfo_All_Result>("uSP_Select_PhoneCallCompanyInfo_All");
        }
    
        public virtual ObjectResult<Nullable<bool>> uSP_Select_PhoneCallStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("uSP_Select_PhoneCallStatus");
        }
    
        public virtual ObjectResult<uSP_Select_PhoneCallUserInfo_Result> uSP_Select_PhoneCallUserInfo(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uSP_Select_PhoneCallUserInfo_Result>("uSP_Select_PhoneCallUserInfo", userIDParameter);
        }
    
        public virtual int uSP_Select_PMHistory(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<short> vid, Nullable<short> pid, string toolID, Nullable<bool> pm_flag, Nullable<bool> ts_flag, Nullable<bool> backup_flag, Nullable<bool> cmsError_flag, Nullable<bool> other_flag)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var vidParameter = vid.HasValue ?
                new ObjectParameter("vid", vid) :
                new ObjectParameter("vid", typeof(short));
    
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(short));
    
            var toolIDParameter = toolID != null ?
                new ObjectParameter("toolID", toolID) :
                new ObjectParameter("toolID", typeof(string));
    
            var pm_flagParameter = pm_flag.HasValue ?
                new ObjectParameter("pm_flag", pm_flag) :
                new ObjectParameter("pm_flag", typeof(bool));
    
            var ts_flagParameter = ts_flag.HasValue ?
                new ObjectParameter("ts_flag", ts_flag) :
                new ObjectParameter("ts_flag", typeof(bool));
    
            var backup_flagParameter = backup_flag.HasValue ?
                new ObjectParameter("backup_flag", backup_flag) :
                new ObjectParameter("backup_flag", typeof(bool));
    
            var cmsError_flagParameter = cmsError_flag.HasValue ?
                new ObjectParameter("cmsError_flag", cmsError_flag) :
                new ObjectParameter("cmsError_flag", typeof(bool));
    
            var other_flagParameter = other_flag.HasValue ?
                new ObjectParameter("other_flag", other_flag) :
                new ObjectParameter("other_flag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uSP_Select_PMHistory", fromDateParameter, toDateParameter, vidParameter, pidParameter, toolIDParameter, pm_flagParameter, ts_flagParameter, backup_flagParameter, cmsError_flagParameter, other_flagParameter);
        }
    
        public virtual ObjectResult<uSP_Select_PMTrigger_Result> uSP_Select_PMTrigger(Nullable<bool> pmFlag, Nullable<short> vid, string group, string toolID)
        {
            var pmFlagParameter = pmFlag.HasValue ?
                new ObjectParameter("pmFlag", pmFlag) :
                new ObjectParameter("pmFlag", typeof(bool));
    
            var vidParameter = vid.HasValue ?
                new ObjectParameter("vid", vid) :
                new ObjectParameter("vid", typeof(short));
    
            var groupParameter = group != null ?
                new ObjectParameter("group", group) :
                new ObjectParameter("group", typeof(string));
    
            var toolIDParameter = toolID != null ?
                new ObjectParameter("toolID", toolID) :
                new ObjectParameter("toolID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uSP_Select_PMTrigger_Result>("uSP_Select_PMTrigger", pmFlagParameter, vidParameter, groupParameter, toolIDParameter);
        }
    
        public virtual int uSP_Select_ValueHistory_BestFit(Nullable<int> pid, string valueTags, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            var valueTagsParameter = valueTags != null ?
                new ObjectParameter("valueTags", valueTags) :
                new ObjectParameter("valueTags", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uSP_Select_ValueHistory_BestFit", pidParameter, valueTagsParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int uSP_Select_ValueHistory_BestFit_EQType(string pids, string valueTags, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var pidsParameter = pids != null ?
                new ObjectParameter("pids", pids) :
                new ObjectParameter("pids", typeof(string));
    
            var valueTagsParameter = valueTags != null ?
                new ObjectParameter("valueTags", valueTags) :
                new ObjectParameter("valueTags", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uSP_Select_ValueHistory_BestFit_EQType", pidsParameter, valueTagsParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int uSP_Select_ValueHistory_Cyclic(Nullable<int> pid, string valueTags, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            var valueTagsParameter = valueTags != null ?
                new ObjectParameter("valueTags", valueTags) :
                new ObjectParameter("valueTags", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uSP_Select_ValueHistory_Cyclic", pidParameter, valueTagsParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int uSP_Select_ValueHistory_Delta(Nullable<int> pid, string valueTags, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            var valueTagsParameter = valueTags != null ?
                new ObjectParameter("valueTags", valueTags) :
                new ObjectParameter("valueTags", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uSP_Select_ValueHistory_Delta", pidParameter, valueTagsParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<uSP_Select_ValueNames_Result> uSP_Select_ValueNames(Nullable<int> pid)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uSP_Select_ValueNames_Result>("uSP_Select_ValueNames", pidParameter);
        }
    
        public virtual int uSP_Select_ValueNow(Nullable<short> vid, string gname, Nullable<short> pid)
        {
            var vidParameter = vid.HasValue ?
                new ObjectParameter("vid", vid) :
                new ObjectParameter("vid", typeof(short));
    
            var gnameParameter = gname != null ?
                new ObjectParameter("gname", gname) :
                new ObjectParameter("gname", typeof(string));
    
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uSP_Select_ValueNow", vidParameter, gnameParameter, pidParameter);
        }
    
        public virtual ObjectResult<uSP_UserLogin_Result> uSP_UserLogin(string login_name, string login_pwd)
        {
            var login_nameParameter = login_name != null ?
                new ObjectParameter("login_name", login_name) :
                new ObjectParameter("login_name", typeof(string));
    
            var login_pwdParameter = login_pwd != null ?
                new ObjectParameter("login_pwd", login_pwd) :
                new ObjectParameter("login_pwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uSP_UserLogin_Result>("uSP_UserLogin", login_nameParameter, login_pwdParameter);
        }
    }
}
